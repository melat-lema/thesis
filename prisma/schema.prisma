generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/.prisma/client" 
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  userId        String    @unique // Clerk user ID
  email         String    @unique
  name          String?
  role          UserRole  @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  courses       Course[]  @relation("CourseTeacher")
  enrolledCourses Course[] @relation("EnrolledStudents")
}

model StudyMaterial {
  id           Int      @id @default(autoincrement())
  cId     String   
  studyType   String   @db.VarChar(255)
  topic        String   @db.Text
  difficultyLevel String @default("Easy")
  status       String   @default("Generating") // New field for status
  courseLayout Json
  createdBy    String   @db.VarChar(255)

  // Optional: Add createdAt and updatedAt timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()
}

model Course {
  id          String    @id @default(cuid())
  title       String
  description String?
  teacherId   String
  teacher     User      @relation("CourseTeacher", fields: [teacherId], references: [id])
  students    User[]    @relation("EnrolledStudents")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Category {
  id      String   @id @default(uuid())
  name    String
  courses Course[]
}

model Attachment {
  id         String   @id @default(uuid())
  name       String
  url        String   @db.Text

  courseId   String
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id           String        @id @default(uuid())
  title        String
  description  String?       @db.Text @default("")
  videoUrl     String?       @db.Text @default("")
  position     Int
  isPublished  Boolean       @default(false)
  isFree       Boolean       @default(false)

  muxData      MuxData?
  quizzes      Quiz[]        // Multiple quizzes per chapter
  courseId     String
  course       Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([courseId])
  @@index([isPublished])
}

model Quiz {
  id          String     @id @default(uuid())
  title       String     @default("Chapter Quiz")
  description String?
  chapterId   String
  chapter     Chapter    @relation(fields: [chapterId], references: [id]) // Relates to Chapter
  questions   Question[] // Each quiz can have multiple questions
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt()

  @@index([chapterId]) // Index for efficient querying
}

model Question {
  id           String   @id @default(uuid())
  quiz         Quiz     @relation(fields: [quizId], references: [id])
  quizId       String
  text         String
  questionType String   @default("multiple_choice") // "multiple_choice", "true_false", "short_answer"
  points       Int      @default(1)
  position     Int      @default(0)
  options      Option[]
  correctAnswer String
  explanation  String?  // Explanation for correct answer
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()

  @@index([quizId])
  @@index([position])
}

model Option {
  id          String   @id @default(uuid())
  question    Question @relation(fields: [questionId], references: [id])
  questionId  String
  text        String
  isCorrect   Boolean  @default(false)
  position    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  @@index([questionId])
}

model MuxData {
  id         String   @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId  String   @unique
  chapter    Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id           String   @id @default(uuid())
  userId       String
  chapter      Chapter  @relation(fields: [chapterId], references: [id])
  chapterId    String
  quizScore    Float?
  isCompleted  Boolean  @default(false)
  attempts     Int      @default(0)
  bestScore    Float?
  lastAttemptAt DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()

  @@unique([userId, chapterId])
  @@index([userId])
  @@index([chapterId])
  @@index([isCompleted])
}

model Purchase {
  id         String   @id @default(uuid())
  userId     String
  courseId   String
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // user       User      @relation("StudentPurchases", fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id             String   @id
  userId         String
  stripeCustomer String   @unique

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model TeacherQualification {
  id         String   @id @default(uuid())
  userId     String
  fileUrl    String   @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
}